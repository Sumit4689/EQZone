<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EQZone Profile</title>
    <link rel="stylesheet" href="/profilePage.css">
</head>

<body>
    <div class="container">
        <nav class="vertical-navbar">
            <div class="nav-header">
                <h2 class="nav-title">EQZone</h2>
                <button class="menu-toggle" aria-label="Toggle menu">
                    <span></span>
                    <span></span>
                    <span></span>
                </button>
            </div>
            <div class="nav-content">
                <ul class="nav-links">
                    <li><a href="/EQZone" class="nav-link"><svg xmlns="http://www.w3.org/2000/svg" width="20"
                                height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-home mr-2">
                                <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                                <polyline points="9 22 9 12 15 12 15 22"></polyline>
                            </svg>Home</a></li>
                    <li><a href="/User/profilePage" class="nav-link active"><svg xmlns="http://www.w3.org/2000/svg"
                                width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                                class="lucide lucide-user mr-2">
                                <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path>
                                <circle cx="12" cy="7" r="4"></circle>
                            </svg>Profile</a></li>
                    <li><a href="/User/myFiles" class="nav-link"><svg xmlns="http://www.w3.org/2000/svg" width="20"
                                height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-text mr-2">
                                <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path>
                                <path d="M14 2v4a2 2 0 0 0 2 2h4"></path>
                                <path d="M10 9H8"></path>
                                <path d="M16 13H8"></path>
                                <path d="M16 17H8"></path>
                            </svg>My Files</a></li>
                            <li>
                                <a href="/User/likedPresets" class="nav-link"><svg xmlns="http://www.w3.org/2000/svg" width="20"
                                        height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                        stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-heart">
                                        <path
                                            d="M20.8 4.6c-1.9-1.9-5-1.9-6.9 0l-1 1-1-1c-1.9-1.9-5-1.9-6.9 0-2 2-2 5.2 0 7.2l7.9 8 7.9-8c2-2 2-5.2 0-7.2z">
                                        </path>
                                    </svg>
                                    Liked Presets</a>
                            </li>
                    <li><a href="/User/uploadFile" class="nav-link"><svg xmlns="http://www.w3.org/2000/svg" width="20"
                                height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-upload mr-2">
                                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                                <polyline points="17 8 12 3 7 8"></polyline>
                                <line x1="12" x2="12" y1="3" y2="15"></line>
                            </svg>Upload File</a></li>
                    <li><button class="nav-link logout-btn"><svg xmlns="http://www.w3.org/2000/svg" width="20"
                                height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-log-out mr-2">
                                <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                                <polyline points="16 17 21 12 16 7"></polyline>
                                <line x1="21" x2="9" y1="12" y2="12"></line>
                            </svg>Logout</button></li>
                </ul>
            </div>
        </nav>
        <main class="main-content">
            <div class="manage-profile">
                <h1 class="manage-profile-title">Manage Account</h1>
                <hr>
                <div class="edit-profile-section">
                    <h2 class="manage-profile-subtitle">Edit Profile</h2>
                    <form id="editProfileForm" class="manage-profile-form">
                        <div class="center">
                            <div class="form-input">
                                <div class="preview">
                                    <img id="file-ip-1-preview"
                                        src="https://img.freepik.com/premium-vector/man-avatar-profile-picture-isolated-background-avatar-profile-picture-man_1293239-4866.jpg"
                                        alt="Profile Picture">
                                </div>
                                <button class="file-ip-1">Upload Image</button>
                                <input type="file" id="file-ip-1" accept="image/*">
                            </div>
                        </div>
                        <div class="manage-profile-txt-field">
                            <input type="text" id="name" name="name" placeholder="<%= user.name %>"
                                value="<%= user.name %>">
                        </div>
                        <div class="manage-profile-txt-field">
                            <input type="text" id="username" name="username" placeholder="<%= user.username %>"
                                value="<%= user.username %>">
                        </div>
                        <div class="manage-profile-txt-field">
                            <input type="email" id="email" name="email" placeholder="<%= user.email %>"
                                value="<%= user.email %>" readonly>
                        </div>
                        <!-- <div class="manage-profile-txt-field">
                            <label for="phone" class="manage-profile-label">Phone</label>
                            <input type="tel" id="phone" name="phone">
                        </div>
                        <div class="manage-profile-txt-field">
                            <label for="job" class="manage-profile-label">Job</label>
                            <input type="text" id="job" name="job" value="Doctor" disabled>
                        </div>
                        <div class="manage-profile-txt-field">
                            <label for="description" class="manage-profile-label">Description</label>
                            <textarea id="description" name="description" rows="5"></textarea>
                        </div> -->
                        <button type="submit" class="btn">Update Profile</button>
                    </form>
                </div>
                <hr>
                <div class="change-password-section">
                    <h2 class="manage-profile-subtitle">Change Password</h2>
                    <form id="changePasswordForm" class="manage-profile-form">
                        <div class="manage-profile-txt-field">
                            <input type="password" id="oldPassword" name="oldPassword" placeholder="Old Password">
                        </div>
                        <div class="manage-profile-txt-field">
                            <input type="password" id="newPassword" name="newPassword" placeholder="New Password">
                        </div>
                        <div class="manage-profile-txt-field">
                            <input type="password" id="confirmPassword" name="confirmPassword"
                                placeholder="Confirm New Password">
                        </div>
                        <button type="submit" class="btn">Update Password</button>
                    </form>
                </div>
                <hr>
                <div class="delete-account-section">
                    <h2 class="manage-profile-subtitle">Delete Account</h2>
                    <div class="manage-profile-close">
                        <p>
                            When you delete your account, you will not be able to retrieve the content or information
                            that you have shared.
                            <span>Warning: Closing your account is irreversible.</span>
                        </p>
                        <button id="deleteAccountBtn" class="btn delete-btn">Delete Account</button>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>

        document.addEventListener('DOMContentLoaded', function () {
            const editProfileForm = document.getElementById('editProfileForm');
            const changePasswordForm = document.getElementById('changePasswordForm');
            const deleteAccountBtn = document.getElementById('deleteAccountBtn');
            const menuToggle = document.querySelector('.menu-toggle');
            const navContent = document.querySelector('.nav-content');
            const fileInput = document.getElementById('file-ip-1');
            const preview = document.getElementById('file-ip-1-preview');

            // Profile picture change
            fileInput.addEventListener('change', function (e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        preview.src = e.target.result;
                        preview.style.display = 'block';
                    }
                    reader.readAsDataURL(file);
                }
            });

            // Edit profile form submission
            editProfileForm.addEventListener('submit', async function (e) {
                e.preventDefault();
                const name = document.getElementById('name').value;
                const username = document.getElementById('username').value;
                const email = document.getElementById('email').value;
                const formData = { name, username, email };
                try {
                    const response = await fetch('/User/updateProfile', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData),
                    });
                    const data = await response.json();
                    if (response.ok) {
                        alert('Profile updated successfully!');
                    } else {
                        alert(data.message || 'Failed to update profile');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred while updating profile');
                }
            });

            // Change password form submission
            changePasswordForm.addEventListener('submit', async function (e) {
                e.preventDefault();
                const oldPassword = document.getElementById('oldPassword').value;
                const newPassword = document.getElementById('newPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;
                const email = document.getElementById('email').value;

                if (newPassword !== confirmPassword) {
                    alert('New password and confirm password do not match!');
                    return;
                }

                try {
                    const response = await fetch('/User/changePassword', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ oldPassword, newPassword, email })
                    });
                    const data = await response.json();
                    if (response.ok) {
                        alert('Password changed successfully!');
                        changePasswordForm.reset();
                        fetch('/logout', {
                            method: 'POST',
                            credentials: 'same-origin'
                        })
                            .then(response => {
                                if (response.ok) {
                                    window.location.href = '/EQZone';
                                }
                            })
                            .catch(error => console.error('Logout error:', error));
                    } else {
                        alert(data.message || 'Failed to change password');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred while changing password');
                }
            });

            // Delete account
            deleteAccountBtn.addEventListener('click', async () => {
                if (confirm('Are you sure you want to delete your account? This action cannot be undone.')) {
                    try {
                        const delresponse = await fetch('/User/deleteAccount', {
                            method: 'DELETE'
                        });
                        if (delresponse.ok) {
                            await alert('Account deleted successfully');
                            fetch('/logout', {
                                method: 'POST',
                                credentials: 'same-origin'
                            })
                                .then(response => {
                                    if (response.ok) {
                                        window.location.href = '/EQZone';
                                    }
                                })
                                .catch(error => console.error('Logout error:', error));
                        } else {
                            const data = await response.json();
                            alert(data.message || 'Failed to delete account');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('An error occurred while deleting account');
                    }
                }
            });

            // Add active class to current page in navbar
            const navLinks = document.querySelectorAll('.nav-link');
            navLinks.forEach(link => {
                if (link.getAttribute('href') === window.location.pathname) {
                    link.classList.add('active');
                }
            });

            // Logout functionality (for demonstration purposes)
            const logoutBtn = document.querySelector('.logout-btn');
            logoutBtn.addEventListener('click', (e) => {
                e.preventDefault();
                handleLogout();
            });

            function handleLogout() {
                fetch('/logout', {
                    method: 'POST',
                    credentials: 'same-origin'
                })
                    .then(response => {
                        if (response.ok) {
                            window.location.href = '/EQZone';
                        }
                    })
                    .catch(error => console.error('Logout error:', error));
            }

            // Mobile menu toggle
            menuToggle.addEventListener('click', function () {
                navContent.classList.toggle('show');
                this.classList.toggle('active');

                // Animate hamburger to X
                const spans = this.querySelectorAll('span');
                spans[0].classList.toggle('rotate-45');
                spans[1].classList.toggle('opacity-0');
                spans[2].classList.toggle('-rotate-45');
            });

            // Close mobile menu when clicking outside
            document.addEventListener('click', function (e) {
                const isClickInsideNav = navContent.contains(e.target) || menuToggle.contains(e.target);
                if (!isClickInsideNav && navContent.classList.contains('show')) {
                    navContent.classList.remove('show');
                    menuToggle.classList.remove('active');

                    // Reset hamburger animation
                    const spans = menuToggle.querySelectorAll('span');
                    spans[0].classList.remove('rotate-45');
                    spans[1].classList.remove('opacity-0');
                    spans[2].classList.remove('-rotate-45');
                }
            });

            // Close mobile menu when window is resized to desktop size
            window.addEventListener('resize', function () {
                if (window.innerWidth > 768 && navContent.classList.contains('show')) {
                    navContent.classList.remove('show');
                    menuToggle.classList.remove('active');

                    // Reset hamburger animation
                    const spans = menuToggle.querySelectorAll('span');
                    spans[0].classList.remove('rotate-45');
                    spans[1].classList.remove('opacity-0');
                    spans[2].classList.remove('-rotate-45');
                }
            });
        });
    </script>
</body>

</html>
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - EQZone</title>
    <link rel="stylesheet" href="/adminPreset.css">
    <script src="https://unpkg.com/lucide@latest"></script>
</head>

<body>
    <div class="container">
        <nav class="vertical-navbar">
            <div class="nav-header">
                <h2 class="nav-title">EQZone</h2>
                <button class="menu-toggle" aria-label="Toggle menu">
                    <span></span>
                    <span></span>
                    <span></span>
                </button>
            </div>
            <div class="nav-content">
                <ul class="nav-links">
                    <li><a href="/EQZone" class="nav-link"><svg xmlns="http://www.w3.org/2000/svg" width="20"
                                height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-home mr-2">
                                <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                                <polyline points="9 22 9 12 15 12 15 22"></polyline>
                            </svg>Home</a></li>
                    <li><a href="/Admin/dashboard" class="nav-link"><svg xmlns="http://www.w3.org/2000/svg"
                                width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                                class="lucide lucide-user mr-2">
                                <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path>
                                <circle cx="12" cy="7" r="4"></circle>
                            </svg>All Users</a></li>
                    <li><a href="/Admin/AllPresets" class="nav-link"><svg xmlns="http://www.w3.org/2000/svg" width="20"
                                height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-text mr-2">
                                <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path>
                                <path d="M14 2v4a2 2 0 0 0 2 2h4"></path>
                                <path d="M10 9H8"></path>
                                <path d="M16 13H8"></path>
                                <path d="M16 17H8"></path>
                            </svg>All Presets</a></li>
                    <li><a href="/Admin/uploadFile" class="nav-link"><svg xmlns="http://www.w3.org/2000/svg" width="20"
                                height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-upload mr-2">
                                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                                <polyline points="17 8 12 3 7 8"></polyline>
                                <line x1="12" x2="12" y1="3" y2="15"></line>
                            </svg>Upload File</a></li>
                    <li><button class="nav-link logout-btn"><svg xmlns="http://www.w3.org/2000/svg" width="20"
                                height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-log-out mr-2">
                                <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                                <polyline points="16 17 21 12 16 7"></polyline>
                                <line x1="21" x2="9" y1="12" y2="12"></line>
                            </svg>Logout</button></li>
                </ul>
            </div>
        </nav>
        <main class="main-content">
            <h1 class="hero">Manage Presets</h1>
            <section class="files-section">
                <div class="filters-container">
                  <div class="search-box">
                    <input type="text" id="searchInput" placeholder="Search files..." />
                  </div>
        
                  <div class="filter-options">
                    <select id="brandFilter">
                      <option value="">All Brands</option>
                      <% const brands = [...new Set(presets.map(file => file.brand))];
                      brands.forEach(brand => { %>
                      <option value="<%= brand %>"><%= brand %></option>
                      <% }); %>
                    </select>
        
                    <select id="modelFilter">
                      <option value="">All Models</option>
                      <% const models = [...new Set(presets.map(file => file.model))];
                      models.forEach(model => { %>
                      <option value="<%= model %>"><%= model %></option>
                      <% }); %>
                    </select>
        
                    <select id="sortBy">
                      <option value="date-new">Newest First</option>
                      <option value="date-old">Oldest First</option>
                      <option value="downloads">Most Downloads</option>
                      <option value="title">Title A-Z</option>
                      <option value="likes">Most Liked</option>
                    </select>
                  </div>
                </div>
        
                <div class="files-grid" id="filesGrid">
                  <% presets.forEach(file => { %>
                  <div
                    class="file-card"
                    data-file-id="<%= file._id %>"
                    data-brand="<%= file.brand %>"
                    data-model="<%= file.model %>"
                    data-like-count="<%= file.likeCount || 0 %>"
                    onclick="window.location.href='/User/preset/<%= file._id %>'"
                  >
                    <div class="card-header">
                      <h3><%= file.title %></h3>
                      <div class="card-stats">
                        <span class="download-count">
                          <i data-lucide="download"></i>
                          <%= file.downloadCount %>
                        </span>
                      </div>
                    </div>
                    <div class="card-body">
                      <p class="description"><%= file.description %></p>
                      <p class="uploader-email">Uploaded by: <%= file.uploadedBy %></p>
                      <div class="tags">
                        <div class="alltags">
                          <span class="tag brand"><%= file.brand %></span>
                          <span class="tag model"><%= file.model %></span>
                        </div>
                        <button
                          class="like-count"
                          data-preset-id="<%= file._id %>"
                          data-is-liked="<%= file.likes?.some(like => like._id.toString() === user?.id) %>"
                          data-like-count="<%= file.likeCount || 0 %>"
                          onclick="event.stopPropagation();"
                        >
                          <i
                            data-lucide="heart"
                            style="fill: <%= file.likes?.some(like => like._id.toString() === user?.id) ? '#ff4444' : 'none' %>"
                          ></i>
                          <span><%= file.likeCount || 0 %></span>
                        </button>
                      </div>
                      <div class="card-footer">
                        <span class="upload-date">
                          <%= new Date(file.createdAt).toLocaleDateString() %>
                        </span>
                        <button
                          class="download-btn"
                          type="button"
                          onclick="event.stopPropagation(); deletePreset('<%= file._id %>')"
                        >
                          Delete
                        </button>
                      </div>
                    </div>
                  </div>
                  <% }); %>
                </div>
              </section>
        </main>
    </div>

    <script>
        // File filtering and sorting functionality
        const searchInput = document.getElementById('searchInput');
          const brandFilter = document.getElementById('brandFilter');
          const modelFilter = document.getElementById('modelFilter');
          const sortBySelect = document.getElementById('sortBy');
          const filesGrid = document.getElementById('filesGrid');

          function filterAndSortFiles() {
              const searchTerm = searchInput.value.toLowerCase();
              const selectedBrand = brandFilter.value;
              const selectedModel = modelFilter.value;
              const sortBy = sortBySelect.value;

              const cards = Array.from(filesGrid.getElementsByClassName('file-card'));

              cards.forEach(card => {
                  const title = card.querySelector('h3').textContent.toLowerCase();
                  const brand = card.dataset.brand;
                  const model = card.dataset.model;

                  const matchesSearch = title.includes(searchTerm);
                  const matchesBrand = !selectedBrand || brand === selectedBrand;
                  const matchesModel = !selectedModel || model === selectedModel;

                  card.style.display = matchesSearch && matchesBrand && matchesModel ? 'block' : 'none';
              });

              // Sort cards
              const sortedCards = cards.sort((a, b) => {
                  switch(sortBy) {
                      case 'date-new':
                          return new Date(b.querySelector('.upload-date').textContent) -
                                 new Date(a.querySelector('.upload-date').textContent);
                      case 'date-old':
                          return new Date(a.querySelector('.upload-date').textContent) -
                                 new Date(b.querySelector('.upload-date').textContent);
                      case 'downloads':
                          return parseInt(b.querySelector('.download-count').textContent) -
                                 parseInt(a.querySelector('.download-count').textContent);
                      case 'title':
                          return a.querySelector('h3').textContent.localeCompare(b.querySelector('h3').textContent);
                      case 'likes':
                          return parseInt(b.dataset.likeCount || 0) - parseInt(a.dataset.likeCount || 0);
                  }
              });

              filesGrid.innerHTML = '';
              sortedCards.forEach(card => filesGrid.appendChild(card));
          }

          // Add event listeners
          searchInput.addEventListener('input', filterAndSortFiles);
          brandFilter.addEventListener('change', filterAndSortFiles);
          modelFilter.addEventListener('change', filterAndSortFiles);
          sortBySelect.addEventListener('change', filterAndSortFiles);


        async function deletePreset(presetId) {
            if (confirm('Are you sure you want to delete this preset?')) {
                try {
                    const response = await fetch(`/Admin/preset/${presetId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        const data = await response.json();
                        throw new Error(data.message || 'Failed to delete preset');
                    }

                    // If deletion was successful, remove the card from UI
                    const card = document.querySelector(`.file-card[data-file-id="${presetId}"]`);
                    if (card) {
                        card.remove();
                        alert('Preset deleted successfully');
                    } else {
                        console.error('Card element not found');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the preset');
                }
            }
        }

        document.getElementById('searchInput').addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const rows = document.querySelectorAll('#presetsTableBody tr');
            rows.forEach(row => {
                const title = row.cells[0].textContent.toLowerCase();
                row.style.display = title.includes(searchTerm) ? '' : 'none';
            });
        });

        document.getElementById('sortBy').addEventListener('change', function() {
            const sortBy = this.value;
            const rows = Array.from(document.querySelectorAll('#presetsTableBody tr'));
            rows.sort((a, b) => {
                const aValue = sortBy === 'downloads' ? parseInt(a.cells[2].textContent) : a.cells[0].textContent;
                const bValue = sortBy === 'downloads' ? parseInt(b.cells[2].textContent) : b.cells[0].textContent;
                return sortBy === 'date-new' ? bValue - aValue : aValue.localeCompare(bValue);
            });
            const tbody = document.getElementById('presetsTableBody');
            tbody.innerHTML = '';
            rows.forEach(row => tbody.appendChild(row));
        });
        // Initialize Lucide icons
        lucide.createIcons();

        document.addEventListener('DOMContentLoaded', function () {
            const menuToggle = document.querySelector('.menu-toggle');
            const navContent = document.querySelector('.nav-content');
            const fileInput = document.getElementById('file-ip-1');
            const preview = document.getElementById('file-ip-1-preview');


            // Add active class to current page in navbar
            const navLinks = document.querySelectorAll('.nav-link');
            navLinks.forEach(link => {
                if (link.getAttribute('href') === window.location.pathname) {
                    link.classList.add('active');
                }
            });

            // Logout functionality (for demonstration purposes)
            const logoutBtn = document.querySelector('.logout-btn');
            logoutBtn.addEventListener('click', (e) => {
                e.preventDefault();
                handleLogout();
            });

            function handleLogout() {
                fetch('/logout', {
                    method: 'POST',
                    credentials: 'same-origin'
                })
                    .then(response => {
                        if (response.ok) {
                            window.location.href = '/EQZone';
                        }
                    })
                    .catch(error => console.error('Logout error:', error));
            }

            // Mobile menu toggle
            menuToggle.addEventListener('click', function () {
                navContent.classList.toggle('show');
                this.classList.toggle('active');

                // Animate hamburger to X
                const spans = this.querySelectorAll('span');
                spans[0].classList.toggle('rotate-45');
                spans[1].classList.toggle('opacity-0');
                spans[2].classList.toggle('-rotate-45');
            });

            // Close mobile menu when clicking outside
            document.addEventListener('click', function (e) {
                const isClickInsideNav = navContent.contains(e.target) || menuToggle.contains(e.target);
                if (!isClickInsideNav && navContent.classList.contains('show')) {
                    navContent.classList.remove('show');
                    menuToggle.classList.remove('active');

                    // Reset hamburger animation
                    const spans = menuToggle.querySelectorAll('span');
                    spans[0].classList.remove('rotate-45');
                    spans[1].classList.remove('opacity-0');
                    spans[2].classList.remove('-rotate-45');
                }
            });

            // Close mobile menu when window is resized to desktop size
            window.addEventListener('resize', function () {
                if (window.innerWidth > 768 && navContent.classList.contains('show')) {
                    navContent.classList.remove('show');
                    menuToggle.classList.remove('active');

                    // Reset hamburger animation
                    const spans = menuToggle.querySelectorAll('span');
                    spans[0].classList.remove('rotate-45');
                    spans[1].classList.remove('opacity-0');
                    spans[2].classList.remove('-rotate-45');
                }
            });
        });
    </script>
</body>

</html>